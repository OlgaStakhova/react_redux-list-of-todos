{"version":3,"sources":["features/filter.ts","features/currentTodo.ts","features/todos.ts","app/store.ts","features/selectors.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FiltersActionsTypes","TODO_ACTIONS","todo","type","payload","currentTodoReducer","todoState","action","TodosActionsTypes","FILTER_ACTIONS","status","SetStatus","query","SetQuery","initState","filterReducer","state","actions","todos","SetTodo","todosReducer","todosState","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","FILTER_SELECTOR","TODOS_SELECTOR","CURRENT_TODO_SELECT","TodoList","props","filteredTodos","selectTodo","useSelector","dispach","useDispatch","length","className","map","id","completed","cn","title","onClick","handelActivetedModal","TodoFilter","useState","setQuery","value","onChange","event","statusPayload","target","placeholder","queryPayload","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","user","setUser","isLoadedUser","setIsLoadedUser","useEffect","userId","usersData","href","email","name","App","isLoaded","setIsLoaded","filteredArray","setFilteredArray","filteredBySelect","nameFilter","todosList","filtredByComleted","searchQury","toLowerCase","includes","todosData","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fdb5b0b.chunk.js","sourcesContent":["import { Action as ActionBase } from 'redux';\n// import { RootState } from '../app/store';\n\ninterface Action<T, P> extends ActionBase<T> {\n  payload: P,\n}\n\nexport enum FiltersActionsTypes {\n  SetStatus = 'filter/set_status',\n  SetQuery = 'filter/set_query',\n}\n\nexport type FiltersAction = Action<FiltersActionsTypes.SetStatus\n| FiltersActionsTypes.SetQuery, string>;\n\nconst setStatus = (status: string): FiltersAction => ({\n  type: FiltersActionsTypes.SetStatus,\n  payload: status,\n});\n\nconst setQuery = (query: string): FiltersAction => ({\n  type: FiltersActionsTypes.SetQuery,\n  payload: query,\n});\n\nexport const FILTER_ACTIONS = {\n  setStatus,\n  setQuery,\n};\n\ninterface FilterStateInterface {\n  status: string;\n  query: string;\n}\n\nconst initState: FilterStateInterface = {\n  status: 'all',\n  query: '',\n};\n\nexport const filterReducer = (\n  state: FilterStateInterface = { ...initState },\n  actions: FiltersAction,\n): {\n  status: string;\n  query: string;\n} => {\n  switch (actions.type) {\n    case FiltersActionsTypes.SetStatus:\n      return {\n        ...state,\n        status: actions.payload,\n      };\n\n    case FiltersActionsTypes.SetQuery:\n      return {\n        ...state,\n        query: actions.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// const filterSelector = (state: RootState) => state.filter;\n\n// export const FILTER_SELECTOR = {\n//   filter: filterSelector,\n// };\n\nexport default filterReducer;\n","// import { RootState } from '../app/store';\nimport { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nexport const setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const TODO_ACTIONS = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nexport const currentTodoReducer = (\n  todoState: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return todoState;\n  }\n};\n\n// const currentTodosSelector = (state: RootState) => state.currentTodo;\n\n// export const CURRENT_TODO_SELECT = {\n//   currentTodo: currentTodosSelector,\n// };\n\nexport default currentTodoReducer;\n","import { Action as ActionBase } from 'redux';\n// import { RootState } from '../app/store';\nimport { Todo } from '../types/Todo';\n\ninterface Action<T, P> extends ActionBase<T> {\n  payload: P,\n}\n\nexport enum TodosActionsTypes {\n  SetTodo = 'todos/set_todos',\n}\n\nexport type SetTodosAction = Action<TodosActionsTypes.SetTodo, Todo[]>;\n\nconst setTodosActionCreator = (todos: Todo[]): SetTodosAction => ({\n  type: TodosActionsTypes.SetTodo,\n  payload: todos,\n});\n\nexport const TODO_ACTIONS = {\n  set: setTodosActionCreator,\n};\n\ntype TodosActions = SetTodosAction;\n\nexport const todosReducer = (\n  todosState: Todo[] = [],\n  actions: TodosActions,\n): Todo[] => {\n  switch (actions.type) {\n    case TodosActionsTypes.SetTodo:\n      return actions.payload;\n\n    default:\n      return todosState;\n  }\n};\n\n// const todosSelector = (state: RootState) => state.todos;\n\n// export const TODOS_SELECTOR = {\n//   todos: todosSelector,\n// };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport { currentTodoReducer } from '../features/currentTodo';\nimport { filterReducer } from '../features/filter';\nimport { todosReducer } from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { RootState } from '../app/store';\n\nconst filterSelector = (state: RootState) => state.filter;\n\nexport const FILTER_SELECTOR = {\n  filter: filterSelector,\n};\n\nconst todosSelector = (state: RootState) => state.todos;\n\nexport const TODOS_SELECTOR = {\n  todos: todosSelector,\n};\n\nconst currentTodosSelector = (state: RootState) => state.currentTodo;\n\nexport const CURRENT_TODO_SELECT = {\n  currentTodo: currentTodosSelector,\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport cn from 'classnames';\nimport { TODO_ACTIONS } from '../../features/currentTodo';\nimport { CURRENT_TODO_SELECT } from '../../features/selectors';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  filteredTodos: Todo[],\n}\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { filteredTodos } = props;\n  const selectTodo = useSelector(CURRENT_TODO_SELECT.currentTodo);\n  const dispach = useDispatch();\n\n  const handelActivetedModal = (todo: Todo) => {\n    // setIsActiveModal(true);\n    dispach(TODO_ACTIONS.setTodo(todo));\n  };\n\n  return (\n    <>\n      {filteredTodos.length < 0\n       && (\n         <p className=\"notification is-warning\">\n           There are no todos matching current filter criteria\n         </p>\n       )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          { filteredTodos.map(todo => (\n            <tr\n              key={todo.id}\n              data-cy=\"todo\"\n              className=\"has-background-info-light\"\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn(\n                  { 'has-text-danger': !todo.completed },\n                  { 'has-text-success': todo.completed },\n                )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handelActivetedModal(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn(\n                      'far',\n                      { 'fa-eye': todo.id !== selectTodo?.id || selectTodo === null },\n                      { 'fa-eye-slash': selectTodo && todo.id === selectTodo.id },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import {\n  useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FILTER_ACTIONS } from '../../features/filter';\nimport { FILTER_SELECTOR } from '../../features/selectors';\n\nexport const TodoFilter: React.FC = () => {\n  const { status } = useSelector(FILTER_SELECTOR.filter);\n\n  const dispach = useDispatch();\n\n  const [query, setQuery] = useState('');\n\n  const handelSelectFiter = (statusPayload: string) => {\n    dispach(FILTER_ACTIONS.setStatus(statusPayload));\n  };\n\n  const handelSearchQuery = (\n    queryPayload: string,\n  ) => {\n    dispach(FILTER_ACTIONS.setQuery(queryPayload));\n    setQuery(queryPayload);\n  };\n\n  const handelCloseSearch = () => {\n    dispach(FILTER_ACTIONS.setQuery(''));\n    setQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => handelSelectFiter(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handelSearchQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query\n          && (\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"Mute volume\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handelCloseSearch}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { TODO_ACTIONS } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectTodo: Todo;\n  // setIsActiveModal: (isActiveModal: boolean) => void;\n  // setTodo: (todo: Todo | null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = (props) => {\n  const { selectTodo } = props;\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoadedUser, setIsLoadedUser] = useState(false);\n\n  const dispach = useDispatch();\n\n  useEffect(() => {\n    if (selectTodo !== null) {\n      getUser(selectTodo.userId)\n        .then(usersData => {\n          if (usersData) {\n            setUser(usersData);\n            setIsLoadedUser(true);\n          }\n        });\n    }\n  },\n  []);\n\n  const handelCloseModal = () => {\n    dispach(TODO_ACTIONS.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isLoadedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectTodo.id}\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"Mute volume\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handelCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user && user.email}`}>\n                {user && user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { TODO_ACTIONS } from './features/todos';\nimport { Todo } from './types/Todo';\nimport { FILTER_SELECTOR, CURRENT_TODO_SELECT, TODOS_SELECTOR } from './features/selectors';\n\nconst filtredByComleted = (nameFilter: string, todosList: Todo[]): Todo[] => {\n  switch (nameFilter) {\n    case 'completed':\n      return todosList.filter(todo => todo.completed === true);\n\n    case 'active':\n      return todosList.filter(todo => todo.completed === false);\n\n    case 'all':\n      return todosList;\n\n    default:\n      return todosList;\n  }\n};\n\nconst filredByQuery = (searchQury: string, todosList: Todo[]): Todo[] => {\n  if (searchQury === '') {\n    return todosList;\n  }\n\n  return (todosList\n    .filter(\n      todo => todo.title.toLowerCase().includes(searchQury.toLowerCase()),\n    ));\n};\n\nexport const App: React.FC = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const dispach = useDispatch();\n\n  const todos = useSelector(TODOS_SELECTOR.todos);\n\n  const selectTodo = useSelector(CURRENT_TODO_SELECT.currentTodo);\n\n  const [filteredArray, setFilteredArray] = useState([]);\n\n  const { status, query } = useSelector(FILTER_SELECTOR.filter);\n\n  useEffect(() => {\n    const filteredBySelect = filtredByComleted(status, todos);\n\n    // setFilteredArray(() => filredByQuery(query, filteredBySelect));\n    setFilteredArray((): any => filredByQuery(query, filteredBySelect));\n  }, [status, query, todos]);\n\n  useEffect(() => {\n    setIsLoaded(false);\n    getTodos()\n      .then(todosData => {\n        if (todosData && todosData.length) {\n          dispach(TODO_ACTIONS.set(todosData));\n          setIsLoaded(true);\n        }\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!isLoaded\n                ? <Loader />\n                : (\n                  <TodoList filteredTodos={filteredArray} />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectTodo && <TodoModal selectTodo={selectTodo} /> }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}